@using TheBlogProject.Services

@inject IImageService imageService
@model TheBlogProject.Models.Destination

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Destination</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Area" class="control-label"></label>
                <input asp-for="Area" class="form-control" />
                <span asp-validation-for="Area" class="text-danger"></span>
            </div>
            <div>
                <p>Current image:</p>
                @if (Model.ImageData != null && !string.IsNullOrEmpty(Model.ContentType))
                {
                    <img src="@imageService.DecodeImage(Model.ImageData, Model.ContentType)" class="img-fluid" alt="Current Image" />
                }
                else
                {
                    <p>No image available.</p>
                }
            </div>
            <div class="form-group">
                <label asp-for="Image" class="control-label"></label>
                <input type="file" name="newImage" class="form-control" accept=".jpg,.png,.gif,.jpeg" />
                <span asp-validation-for="Image" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
